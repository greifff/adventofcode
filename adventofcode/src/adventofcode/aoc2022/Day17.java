package adventofcode.aoc2022;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Day17 {

	public static void main(String[] args) {
		String test1 = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
		String input = ">><<>><<>><><<>><<><>>><>>>><<>>>><<<<>>><<<>>>><>><<<<>>>><>><>>><<><>><<>><<>>><<>><<<<>>><>><<<>>>><<>><<><<><<>><><<<<>>><><<<<>>><<>><<<<>>><<<<><<><<>>>><<<>>><<<><>><<>>><<><<<<>><<>>><>>>><<>>>><<<<>><<<>><<<<>>><<>><<<<>>><<>>>><<<<>>><>>><>>><><>>>><><<<<><<<><<>><<<>><<<><>>><>><>>>><<<<>><<><<<>>>><>>><<<<><<<><<><>>>><<<<>><<>>>><<<>><<<<>>>><<<>><<>><>><<<<><<<<><<>>>><<>>><><<>><<<>><<<<>>><<<<>>>><>>><<>>><>>><<<>><><<>><<<<>><<<>>><<<>>>><<<><<<>>><<<>><<>>>><><>><<><<<><>>>><<>>><<<<>><<<<>><<<<>>><<>><<><><<<<>>>><<>><<<><>>>><<><<<>>><<<<><<><>>><<>>><><>>>><<<>>><<<>><><<<<>>><<<<>>>><<<<>>>><<>><<<><>>><<<<>>>><<<<>><<<<>>>><<<<><<<>><<<<><>><<<<>>>><><<>><<>>><<<<>><<>><<<><<<>>>><<>>>><>>><<<>>>><<<><<>>>><<<><<><><<>>><<>>>><<<<>>><>>><<<<>><<<><<><<<<>><<<><<<<>>>><>><<<<><<<>>><<<>>>><>>><<<<>>><<>><>>>><>>>><<<<>>><>>><<<>>>><<<<><>>><>>><>>>><>>><<<>>>><>><<<>>>><<>>>><<<<>>>><<<>>><<>>>><<<>>><>>>><<<><>><><<<<><<<<>><<><<<>>><<<<>>>><<>>><<<<>><<<>><<<<><<>><<<>>>><<<>>>><<<><>>><<<>>>><<>>>><<<><<<<>>>><<<<>><>><<<<>>><>>><<><>><<>>>><<>><<>><<>>><<>>><<<<>><<<<>>><>>><>>>><<>>><<>>><>>><<<<><>>><<<>>>><<<<>><<<<><<<<>>><<>>>><<>>><<<>>>><>><<<>>>><<<<>><<<><<<<>>><<<>>>><<<><<>>>><<>>><<<><>>><><<><<>>><<<>><<<>>><<>>><<>>>><<<>>>><<<<><<>><<<>>>><<>>>><<>>>><<<>><>>>><<>><<<<>>>><<<>>><<>>>><<><<<>>><<<<>>>><<<<>>><<>>>><<<<><>>><<<><>><<>><<<><>><<<>><>><<<<>><>><>>>><<>><<>><<<<>>><<<>>>><<>>>><<>><<<<><>>>><<>><<><><<<><>>><<<<>>>><<<>>><>><<><<<<>>><<<<>><<>><<><><>><<<<><<<<>>>><<>>><>>>><<<>><<>><<>>><<<<>>><<<<><<<<>>><<<<>><<<<><<<><<><>>>><<<<>><<><<>><>>><<<<>>><<<><<<<>>><<>>><<<>>><>>><>><<><><<<<><><<<<>>><<<>><<><<<<>>>><>>><<<>><<<<><>><<<<>>>><<<<>><<<<>><<<<>>>><<><<<><<>><<<><<<<>><<<<>><<<<>>>><<<><<>>><<>>>><<<<>>>><<<>>>><<<<><<<<>>>><<<>>>><<>>>><>>>><<>>>><>>>><<<>>><<<<>><<>>>><<<<><<<<>>><<<<>>>><>><<<>><><<<<>>><>>><>>>><<<<>><<<>><<<<>>><<>>><<<<><<>><<<>>><<>><<<><<>><<>>>><<><<><>><>>>><<><><<><<<>>><<<<>>><>><<<<><<>>><><<>>><<<<>><<>>>><<>>>><><<>>>><<>>><<<>>>><<<>>>><<>>><>>><>><<<<>>><<<><<><<<<><<><<<<>>><>><<<<>>>><><<<>>>><>>>><<<<>>><>><<<>>><<<<>><>><>><<>>>><<<<>>><<<>>><<>>>><<<<><<>><<<><<<<>>>><>>>><<<>>><<<<>>>><><<>>>><<<<>>>><<>>><<<<>><<<<>>><>>>><>>>><<>><<<>>><>>><>>><<>>><<><<<<>>><<>>><<>>><<<><>><<<>>><<<<>>><<>>><<<><<<<>>>><>>><>><<>>>><<<>>><><><<<>><<<<><<<><<<><<>>>><<<<>>>><>><<<<>><<>><<<>>><<>><<<<>>>><<<>>><<<>>><<<<>>><<<>>><<<><<<<>>>><<<<>><<>><<<>>>><<><<<>>><<>><<<<><<<>><<<<>>>><>><<<><<<<>>><<>>>><><<<>>>><>><<><<<<>><<<>>><<<>>><<><<<<>>>><<<<>>>><>>>><<<><>><<<<><><<<>><>><<<<>>>><<>>><<<>>>><<<<>>>><<<><><<<>>>><<>><<>>>><<>><<>><<>><<<<>>>><<<<>>>><<<>>>><<<>>>><<<>>>><<<<>>>><<<>>>><<>><<>><<<<>>><<><<<<><<>>>><<>>>><<>><<<<><<>>><<<>>>><<>>>><<><<>><<>><<><<<<>>>><<<>>><>><>><<<<>><<<>><<<<>>>><<<<>>>><><>>><<<<>><<<>>><<<>><><<<<>><<<<>><<<<>>>><>><<>>>><<>>>><>><<>>>><<<<><<<>><>>>><<<<>>><<<><<<>>>><>>>><<>><>>>><>><<<<>>>><><>><<<>>><>><>><<<<>>>><>>>><<<>><><<><<>>>><<>>>><<>>><><<>>>><><<<>><<>>><><<<>>><<<><<<><<<>>><>><<><<<<>><<<<>>>><>>><<<>>><<<<><>>><<>>><<><<>><><<<>><>>>><<<><><<<<>>>><<<>><>>><<>>>><<<<>>><>><<<>><>>><<><<<><>>><<<<>>><<<>><<>>><>><<<>>><<<<>><<>><<<<>>>><>><<>>><>>><<<>>><>>><<<<><<><>><>>><<>>>><<>>>><<<<><<<<>>>><<>>><<><<>>><>>>><<<>>><>>>><<<>>><<<>>>><<<<><<>>>><>>><<<<>>><<<<>>><><<<<>>>><<>><<<>><<><>><>><>>><<<><><>><<><>><<<>>>><<<>>><<<<>>><<>><><<<<>>><<<<><<<>>>><<<<>><<<>>><<>><>><>><<<<>><<<<>>>><>>>><<<<>>><<>>><<<>>><<<><<<><><<>>><<<>>>><<<<>><<<>>>><<><<<><<>>>><<><<<>><<><<>>>><<<><<<<>><>>><<<><<><<<<><<>><>><>>>><>>>><<<<>><<<>><<<>>><<>>>><<>><<>><<><<<<>>>><<<<>><<<<>>><>>>><<<<><<<>>>><<>>>><<>>><<<>>><<<>>><<><<>>>><><<<<>>><<<>>>><<><<<<><<<>><<<>><<<>>>><<<<>>><<><<<<><<<>>>><<>><>>><<<<>>>><>><>>>><<>>>><>><>>>><<<><<<<>>><<>>><>>><>>><><<<<><><>>>><<<<>>>><<<<>>><<>>><<>>><>>>><<<<>>><>>><>><>>>><<>><<><>><><<<><<>><<><<<<>>>><>><<<>>><<>>><<<>>>><<<<>><<<>>>><<>>><>><<<><>><<<<>>>><<><<>><<<>><<>>>><>>><<<<>>>><<<>>><<<>>><<<>>>><<<><<<>>><<>>><>><<>><>><><>><>>>><>>><<<>>><<<<><>>>><<<>>><>><><<>><<<<>><<<<>>>><>><<>>><<>>>><<<<>>>><<<>>>><<<<>><>>>><<>><>><<<><<>>><<<<>><>><<<<>><>>><<<<>>><>>>><>>>><<<><<>>><><<<<>><>><<<<>>><<>><<<<>>>><<<><><<<<>><<<<>>>><<<<>>><<<>><<<<>>><<>><<>>>><<<<>><<>>>><<>>>><<<>>>><>>>><<>>><><<<><><<<>>>><>>><<<<>><>>>><<<>>><<<>>><>><<<>>><<<>>>><<<<>><>><<<<>>>><<>>><<><>><<<>><<<<>>><<<<><<<<><<<>>><<<<>>>><>>>><><<<><<><>>>><><>>>><<>><>>><<<<>><<<<>><>><<>>>><<>><<>>><>>>><<>>>><<<<>>>><>><>>><<><>><<>>><<<>>>><<>>><<<<>>><<<<>>>><<<<><<><<>>>><<<>><<>><<<<><<>>><><>><<>>>><><<<<>><<<><<>>>><<<><<><<>><<>>><>>>><<>>>><><>>><<<<>>>><<>><<<><<<<>><<<>>><<<>><<<<>>>><<<<>>>><<>><>><<<<>>><><<<>>><>><<<>><>>>><<<>>><<>>>><<<<><<>><<<>><<<>>>><>><<>><<><<>><<>>>><<>>><><<<>><>><><>><<<>>>><<<><<>>><>><>>>><<<><>>><<<><<>>><<>>>><<<<>><<<>><<><<<<>>><><<<>><>>><<><<<>>>><>>><>><>>><<<<>>><><<<<>>><<>>>><<<<>>>><>>><<><<<<>>>><<>>><>>><><<<>>><<<>><<<<><<<>>>><<<>>><<<<>>>><<<<>>>><<>>>><<<<><>>>><>>>><<<>>>><<>>><<>>>><<<<>><<>><<<>><<>>><<>>>><<><<<<>>>><<<>><<<>>>><<<<>><<<>>>><<>>>><<>><<>>>><<<>><>>>><<<>>>><<<>>>><<<><>><<>><>><<<>>>><<<<>>><<<<>>><<><<<<>>><><<>>>><<<>>>><>>>><<><<<>>><<><>><<<<>>><><<>>><<<<>>>><<<>><<<>><<<>>><<<>><<<>>>><<>>>><><<<>><<<<><>>><><<>>>><><<<<><<>>>><<><<<<>>><<<>>><<<<>><<><<<<>>><<<<><<>>><<>><>><>><<<>><<<>><<>><<<<>>>><<<><<>>>><>>><<><<>><<<>>>><<<>>><>>><<<>>>><<<<><<>>><<<<>>>><<>>><<<<>><<>>><><<<<><<<>>>><<<>>>><>>><>><<<<>>><<>><>>>><<<><<<<>>><<>>>><<<>><<<><<<<><<<<>>><<<><<<>>><<>><<<>>><<<<>><>>>><>>><<>>>><<>>><<<<>>>><<><>>>><<<><<<>>><<<><>><<<<>>>><<<>>>><<>><>>><<<<>><>><<>><<<>>>><<<><<<<>>><>>>><<<>>><<><<>>><<<<>>><<<<><<>>>><>>><<<<>>>><<<<>><<<>>><<<>>><<<<>><<<><<<><<<<>>><<>>><<<<><<<>>><>><<<><<<><<<><>><<><<<>>><<<>><<<<>><<<<><<<<><<<<><<<<>>>><<>>>><<<>>><<<>>><<<<>>><<>>>><><>><>>>><<>>>><<<>><<<><<>><<<<>>><<>>>><>><<>>>><<<><<>>>><<<>>><<<<><<><<<<><<>>>><<<>>><<<>>>><<>>>><><>><<<>>>><<<<>><<<<>>>><<>>><<<<><<><><<<<>><<<<>>><<<<>><<<<>>><<<<>><>><<<<><<<>><<<<><<<>>><<>><<<>>><><<<>>>><<>>><<<>>><>><<<<>>>><<<<>><<<><<<<>>>><<<<>>><<<><<<<>>><>>>><<<>>>><<<>>><<<<>><<<<>>><<<>><<<>>><<<<><<<<><<<><>>><<<<>><><<<<><><<<><><>><<>><>>>><<>><<<>><<<<>><>>>><<>><<<<>>><>><<<>><<<<>>><<<><>><<><><><<<<>>>><<<<>>><<>><<>>>><<>>><<<>>><<<<><>><>><<<<><<<<><>><<><<>>>><><<<<>><<>><<<<>>>><<<>>><<<<>>>><<<<>><<<><<>>><<<<>>>><<<>><<<><<<<>><>><<>>><<<>>>><<<<>><<>>><<<>>><<<<><<<><<<<>>><<>><<>>>><<><>>><<>>>><<>>><<>>>><<>>><<<><<>>><>>>><<<>>><<<><<>>>><<<<>>><<<<>>>><<<>><<><<><<<<><<<><<<><<<><>>>><<>>><><<>>>><>>><<>>>><<<<><<<>><<>>><<<>>><<<<>><>><<>>>><<<<><<<><<<>>>><<<<>><>>><>>><<><<<<>><<<<>>>><<<>>><><>>><<<>>>><<<<>><<<>>><>>><<<<>>><<<<>>>><>><<<<>><<<><>><<>><<>>><>><<>>>><>>>><<<<>><>>>><<<>><<>>>><<<>>>><<>><<>>><<<<>>><<<>>>><<>>>><<>><<>>><<><<<>><<<>>><><<>>>><<<<>>><<<>>><>>><<<<>>>><<<<><<<>><>>>><>><<<<>><<<<><<<>>><<><<<>>><<<<>><<>>>><<<<>>><<<<>>>><>>>><><<><>>><<<>><<<>>>><<><<<>>>><<><<<<>>>><<<>>>><<<>>><<<<><>>><<<>>><><>>>><>>>><>>>><<<>><<<<>><<<<>>>><<>>><<>>><<<>><<>>><<<<>>>><<<<>>>><<><<<<>>><<<>><>>>><>>><>>><<<>>>><<><<<<>>><<<<>><<<<><<<>><<<><<<<><<<>><>>>><>><><<<<><>>><<<<>>><<<>><<<>>>><<<<>>><<<<><<<>><<>>>><<>>>><<<>>><>><>><>><<><<<>>>><<<<>>><<<>>><<<>>><>>>><<<<>>>><<<<>>>><<><<<<>>>><>><<<<>><<<<>>><<<<>>>><>><<<<>>><<<><<<<>>><>><><<<>>>><<<<>>><<<<>><<<>>><<>>>><<<>>><<<>>>><>>>><<<<>>>><<>>><<<>>>><<<><<<>><<><<<>><<<><>><<>>><<<><<>><<<>>>><<<<><<<><<>><<<>>>><<><<<<><<>>><<>>><<<<>><<>>>><<<>><>>>><<><<>>><<<>>>><<<>>>><<><<<<>>>><<<<>><<<<>>><<<<>>>><<>>>><<<><<>>><<<>>>><<<>>>><<<><<<>>><<>>><<>>>><><<>>>><<><<<<>>><<<<><>>><<<<>>>><><<<<>><<><<>><<<<>>>><<<<>>>><<<<>><<<<>>><><>>>><<<<>>>><<><<><<<>>><><<>>>><>>><<<<>><>><>><<<<>>><>><<<>>>><<>><<<>>><><<>>><>><<<><<<><<<<><<>><<>>>><<<<><<>>>><<<>>>><<<>>>><<>>>><>><<<<><<<>>><><<<><<<<>>>><><<<>>><>>>><<<<>><<<<>>><>>><<<<>>><<<<>><<<<><><>>>><><>><<>>>><<<<>>><<<><<>><>>>><<<>>>><<<>>>><<<<>><<<<>><<<<>><>>><><>>>><<<<>>><<<<>>>><<>>><<<<>>>><<<<>><<<>>>><<<>>><<<>>><<<>>>><<<>>>><<<>>><<<>><<<<>><<<>>><><<>>>><<<><<><<<<>>><>>>><>>>><>><<<><<>>><<<>>>><><<><<<<>>>><<<>>>><<>><>>><<>><<<>>><>>>><<>>>><<<<><<<>>>><<<<><<<<>><<<>>><<<><<<<>>><<<><<<>>>><>>>><><>>>><<>><<<<>>><<>><><>><<<<><>><<<<>><>><<<>>><<<<>>><<>>><<<<>>><<><<<<>>>><<<<>><<<>>><<<<>>><<>>><<<<>><<><<<<>>><<<><<<<><>>><<<<>><<>>>><<<<>>><<<<>>><<<>>><<<<><<>>>><<>>>><<>>><<<<>>>><<<>>><<<<><<>><<<<><<<<>>>><<<<>>><<>><<<<>>><<<>>>><>>>><<>>>><<<<>><<><<>>>><<>>><<<>><<<><>>><<>>><<>><>><<>>>><>>><<<<>><<<>><>><<<<>>><<<<><><<>>>><<<>>><<<>>>><<<<><>>><<>><<<<><<>>>><<<<><<<>><<<<>>>><<<><<<<>>><<<>>>><>>>><>>><<<>>>><>><>>><>>><<<>><<<<><<>>><><<<<>>>><<<>>>><<>><><>><>><>><<><<<<>>><>><<<>>>><<<<>>><<<>>><<<<>>><<>><<<>><>>><<<<>>>><<<<>><<<>>><<<><<<<>>>><<<>><<<<><<<<>>><<<>><<><<<>>>><<<<>><>>>><<<<>><>>><<><<>><<>><>>><<><<>><<><<<<>>>><>>>><<>>>><<<>>><<>>><<<>><<<<>>><>><<><<<>><<>><<<>>>><<<>>><<<<>><>>>><<><<<<><><<<>>>><><<<>><<<><<<>><<<<><<>><<>>><<>>><<<<>>>><<><>>><<<<>>><><<><<<<><<<<>>>><>>>><<>>><<<>><>><<><<<>><<>>><<<<>><<>>><<>>>><<<<>><<<>>><<>>><<<<><<>>><<><<>>><<<>><>><<<>>>><>>><<<><<<>><<>>>><<><>>><<<<>>>><<>>><<<>><<<<><<>>>><<<><<<<>>>><<>>><<><><<<><<<>>><>>>><<<>><<<<>>>><<<>><<<<>>><>>>><<<><>><>>><<<<>>>><>>><>>><<<<>>>><<>>>><<><<>>>><<<<>><>><<>>>><<>>>><>>><>><<<<>>>><<>>>><><>>>><<<<>>><<<<>>>><>>><<<>>><<<>><>>>><<<>>>><<<<>><<<<>>><<><<<><><<>>>><<<<>><<<<>><<>>>><<<>>>><<><<>>><>>><<<<>>><<<<>>>><<><><<<>><<><<<>>><<><<>>><<<>>><<>><<><<<>><><<<<>>>><<<>>>><<<>>><<<<>><<<>>><<>><<<>>><<<>>><<<>>>><>><><<<<>>><>><>>>><<>>><>>><>><<<>><<>><<<<>>>><<<><<<<>><<>>><>><<<>>>><<<>>><<>>><><<>>>><<<<>><<<><<>>>><<<>><<<>>>><<<<>>><<>>><<<<><<>>><<<<>>><<>>>><<<><>><<>>>><<><<>>><<<<>><>><<>>>><<>>><><<<><<<<>><><<><><<<<>>><<<>><>>>><<><<<<>>><<<<>>><<<<>>>><>><<><<<><<<>>><<>>><<<<>><<><<><<<><<<>>><<>><>>>><>>>><<<<>>>><<<>>>";

		part1(test1);
		part1(input);

		part2(test1);
		part2(input);
	}

	private static void part1(String input) {
		long start = System.currentTimeMillis();

		Shaft shaft = new Shaft();

		List<Shape> shapes = getShapes();

		int windIndex = 0;

		// inject at maxX+4 , y=2
		for (int rock = 0; rock < 2022; rock++) {
			int shapeIndex = rock % shapes.size();

			Shape currentShape = shapes.get(shapeIndex);
			int x = shaft.lines.size() + 3;
			int y = 2;

			while (true) {
				int dy = input.charAt(windIndex) == '<' ? -1 : 1;

				windIndex = (windIndex + 1) % input.length();

				if (y + dy >= 0 && y + dy <= 6 && currentShape.canBe(shaft, x, y + dy)) {
					y += dy;
				}

				if (!currentShape.canBe(shaft, x - 1, y)) {
					currentShape.place(shaft, x, y);
					break;
				}
				x--;
			}

		}

		System.out.println(
				MessageFormat.format("time: {0}, part1: {1}", System.currentTimeMillis() - start, shaft.lines.size()));

	}

	private static void part2(String input) {

		long start = System.currentTimeMillis();

		Shaft shaft = new Shaft();

		List<Shape> shapes = getShapes();

		int windIndex = 0;

		List<Integer> heightDelta = new ArrayList<>();

		// inject at maxX+4 , y=2
		for (int rock = 0; rock < 100_000; rock++) {
			int previousHeight = shaft.lines.size();
			int shapeIndex = rock % shapes.size();

			Shape currentShape = shapes.get(shapeIndex);
			int x = shaft.lines.size() + 3;
			int y = 2;

			while (true) {
				int dy = input.charAt(windIndex) == '<' ? -1 : 1;

				windIndex = (windIndex + 1) % input.length();

				if (y + dy >= 0 && y + dy <= 6 && currentShape.canBe(shaft, x, y + dy)) {
					y += dy;
				}

				if (!currentShape.canBe(shaft, x - 1, y)) {

					currentShape.place(shaft, x, y);
					break;
				}
				x--;
			}

			heightDelta.add(shaft.lines.size() - previousHeight);
		}

		/*
		 * idea from Rangsk: run the simulation, log the hieght increases. Then consider
		 * an offset of iterations that are probably not part of the repetition pattern
		 */

//		System.out.println("? " + heightDelta.stream().distinct().map(i -> "" + i).collect(Collectors.joining(",")));

		int offset = 2000; // assumption

		for (int length = 10; length <= 25_000; length++) {
			boolean hit = true;
			for (int i = 0; i < length; i++) {
				hit &= heightDelta.get(offset + i) == heightDelta.get(offset + i + length);
			}
			if (hit) {
				System.out.println("# cycle length: " + length);

				long sum = 0;
				for (int i = 0; i < offset; i++) {
					sum += heightDelta.get(i);
				}
				long trillion = 1_000_000_000_000L;
				long loops = (trillion - offset) / length;
				long loop = 0;
				for (int i = 0; i < length; i++) {
					loop += heightDelta.get(i + offset);
				}
				sum += loop * loops;
				long tail = (trillion - offset) % length;
				for (int i = 0; i < tail; i++) {
					sum += heightDelta.get(i + offset);
				}
				System.out.println(
						MessageFormat.format("time: {0}, part2: {1}", System.currentTimeMillis() - start, sum));

				return;
			}
		}
	}

	static class Shaft {
		List<boolean[]> lines = new ArrayList<>();

		boolean at(int x, int y) {
			if (x == -1)
				return true;
			if (x >= lines.size()) {
				return false;
			}
			return lines.get(x)[y];
		}

	}

	static interface Shape {

		boolean canBe(Shaft shaft, int x, int y);

		void place(Shaft shaft, int x, int y);
	}

	private static final List<Shape> getShapes() {
		return Arrays.asList(new Shape() {
			// ####

			@Override
			public boolean canBe(Shaft shaft, int x, int y) {

				boolean result = true;

				for (int y1 = y; y1 < y + 4; y1++) {
					if (y1 > 6)
						return false;
					result &= !shaft.at(x, y1);
				}
				return result;
			}

			@Override
			public void place(Shaft shaft, int x, int y) {
				if (shaft.lines.size() == x) {
					shaft.lines.add(new boolean[7]);
				}

				boolean[] row = shaft.lines.get(x);

				for (int y1 = y; y1 < y + 4; y1++) {
					row[y1] = true;
				}
			}

		},

				new Shape() {

					// .#.
					// ###
					// .#.

					@Override
					public boolean canBe(Shaft shaft, int x, int y) {
						boolean result = true;

						result &= !shaft.at(x, y + 1);
						result &= !shaft.at(x + 2, y + 1);
						for (int y1 = y; y1 < y + 3; y1++) {
							if (y1 > 6)
								return false;
							result &= !shaft.at(x + 1, y1);
						}
						return result;
					}

					@Override
					public void place(Shaft shaft, int x, int y) {

						while (shaft.lines.size() <= x + 2) {
							shaft.lines.add(new boolean[7]);
						}

						boolean[] row = shaft.lines.get(x);
						row[y + 1] = true;
						row = shaft.lines.get(x + 2);
						row[y + 1] = true;

						row = shaft.lines.get(x + 1);
						for (int y1 = y; y1 < y + 3; y1++) {
							row[y1] = true;
						}
					}

				},

				new Shape() {

					// ..#
					// ..#
					// ###

					@Override
					public boolean canBe(Shaft shaft, int x, int y) {
						boolean result = true;

						result &= !shaft.at(x, y + 1);
						for (int y1 = y; y1 < y + 3; y1++) {
							if (y1 > 6)
								return false;
							result &= !shaft.at(x, y1);
						}
						result &= !shaft.at(x + 1, y + 2);
						result &= !shaft.at(x + 2, y + 2);
						return result;
					}

					@Override
					public void place(Shaft shaft, int x, int y) {

						while (shaft.lines.size() <= x + 2) {
							shaft.lines.add(new boolean[7]);
						}

						boolean[] row = shaft.lines.get(x);
						for (int y1 = y; y1 < y + 3; y1++) {
							row[y1] = true;
						}
						row = shaft.lines.get(x + 1);
						row[y + 2] = true;
						row = shaft.lines.get(x + 2);
						row[y + 2] = true;
					}

				},

				new Shape() {

					// #
					// #
					// #
					// #

					@Override
					public boolean canBe(Shaft shaft, int x, int y) {
						boolean result = true;

						for (int x1 = x; x1 < x + 4; x1++) {
							result &= !shaft.at(x1, y);
						}
						return result;
					}

					@Override
					public void place(Shaft shaft, int x, int y) {

						while (shaft.lines.size() <= x + 3) {
							shaft.lines.add(new boolean[7]);
						}

						for (int x1 = x; x1 < x + 4; x1++) {
							boolean[] row = shaft.lines.get(x1);
							row[y] = true;
						}

					}

				},

				new Shape() {

					// ##
					// ##

					@Override
					public boolean canBe(Shaft shaft, int x, int y) {
						boolean result = true;

						for (int x1 = x; x1 < x + 2; x1++) {
							for (int y1 = y; y1 < y + 2; y1++) {
								if (y1 > 6)
									return false;
								result &= !shaft.at(x1, y1);
							}
						}
						return result;
					}

					@Override
					public void place(Shaft shaft, int x, int y) {

						while (shaft.lines.size() <= x + 1) {
							shaft.lines.add(new boolean[7]);
						}

						for (int x1 = x; x1 < x + 2; x1++) {
							boolean[] row = shaft.lines.get(x1);
							for (int y1 = y; y1 < y + 2; y1++) {
								row[y1] = true;
							}
						}

					}

				});
	}

}
